"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[9113],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(96540);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}},73490:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ambari-dev/developer-tools","title":"Developer Tools","description":"Diff and Merge tools","source":"@site/versioned_docs/version-2.7.5/ambari-dev/developer-tools.md","sourceDirName":"ambari-dev","slug":"/ambari-dev/developer-tools","permalink":"/docs/2.7.5/ambari-dev/developer-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/versioned_docs/version-2.7.5/ambari-dev/developer-tools.md","tags":[],"version":"2.7.5","frontMatter":{},"sidebar":"ambariSidebar","previous":{"title":"Development in Docker","permalink":"/docs/2.7.5/ambari-dev/development-in-docker"},"next":{"title":"Feature Flags","permalink":"/docs/2.7.5/ambari-dev/feature-flags"}}');var o=r(74848),i=r(28453);const s={},a="Developer Tools",l={},c=[{value:"Diff and Merge tools",id:"diff-and-merge-tools",level:2},{value:"Integrating Araxis to Git as your Diff and Merge tool",id:"integrating-araxis-to-git-as-your-diff-and-merge-tool",level:3},{value:"Git Best Practices",id:"git-best-practices",level:2},{value:"Useful Git Commands",id:"useful-git-commands",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"developer-tools",children:"Developer Tools"})}),"\n",(0,o.jsx)(t.h2,{id:"diff-and-merge-tools",children:"Diff and Merge tools"}),"\n",(0,o.jsxs)(t.p,{children:["Araxis has been kind enough to give us free licenses for Araxis Merge if you work on open source, just submit a request at ",(0,o.jsx)(t.a,{href:"http://www.araxis.com/buy/open-source",children:"http://www.araxis.com/buy/open-source"})]}),"\n",(0,o.jsxs)(t.p,{children:["Download from ",(0,o.jsx)(t.a,{href:"http://www.araxis.com/url/merge/download.uri",children:"http://www.araxis.com/url/merge/download.uri"})]}),"\n",(0,o.jsx)(t.p,{children:"You will be prompted for your serial number when you run the application for the first time. To enter a new serial number into an existing installation, click the Re-Register... button in the About window."}),"\n",(0,o.jsx)(t.h3,{id:"integrating-araxis-to-git-as-your-diff-and-merge-tool",children:"Integrating Araxis to Git as your Diff and Merge tool"}),"\n",(0,o.jsx)(t.p,{children:"After installing Araxis Merge,"}),"\n",(0,o.jsx)(t.p,{children:"On Mac OS X,"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Drag Araxis across to your ~/Applications folder as normal"}),"\n",(0,o.jsx)(t.li,{children:"Copy the contents of the Utilities folder to (e.g.) /usr/local/araxis/bin"}),"\n",(0,o.jsx)(t.li,{children:'Add the path to your startup script: export PATH="$PATH:/usr/local/araxis/bin"'}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In your .gitconfig file (tested on Mac OS X),"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'[diff]\n        tool = araxis\n[difftool]\n        prompt = false\n[merge]\n        tool = araxis_merge\n[mergetool "araxis_merge"]\n        cmd = araxisgitmerge "$PWD/$REMOTE" "$PWD/$BASE" "$PWD/$LOCAL" "$PWD/$MERGED"\n'})}),"\n",(0,o.jsx)(t.h2,{id:"git-best-practices",children:"Git Best Practices"}),"\n",(0,o.jsx)(t.p,{children:"This is just a personal preference, but it may be easier to create one Git branch per Jira/feature. E.g.,"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'git checkout trunk\ngit checkout -b AMBARI12345                             # create the branch and switch to it\ngit branch --set-upstream-to=origin/trunk AMBARI12345   # set the upstream so that git pull --rebase will get the HEAD from trunk\n# Do work,\ngit commit -m "AMBARI-12345. Foo (username)"\n# Do more work\ngit commit --amend                                      # edit the last commit\ngit pull --rebase\n  \n# If conflicts are detected, then run\ngit mergetool                                           # should be easy if you have Araxis Merge setup to do a 3-way merge\ngit rebase --continue\ngit push origin HEAD:trunk\n'})}),"\n",(0,o.jsx)(t.h2,{id:"useful-git-commands",children:"Useful Git Commands"}),"\n",(0,o.jsx)(t.p,{children:"In your .gitconfig file,"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"[alias]\n        st = status\n        ci = commit\n        br = branch\n        co = checkout\n        dc = diff --cached\n        dtc = difftool --cached\n        lg = log -p\n        lsd = log --graph --decorate --pretty=oneline --abbrev-commit --all\n        slast = show --stat --oneline HEAD\n        pshow = show --no-prefix --format=format:%H --full-index\n        pconfig = config --list\n"})}),"\n",(0,o.jsx)(t.p,{children:"Also, in your ~/.bashrc or ~/.profile file,"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"alias branchshow='for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k|head -n 1`\\\\t$k;done|sort'\n"})}),"\n",(0,o.jsx)(t.p,{children:"This command will show all of your branches sorted by the last commit times, which is useful if you develop one feature per branch."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);