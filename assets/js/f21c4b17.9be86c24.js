"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[6757],{28453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>c});var s=i(96540);const t={},n=s.createContext(t);function a(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(n.Provider,{value:r},e.children)}},33972:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ambari-design/metrics/ambari-server-metrics","title":"Ambari Server Metrics","description":"Outline","source":"@site/versioned_docs/version-2.7.8/ambari-design/metrics/ambari-server-metrics.md","sourceDirName":"ambari-design/metrics","slug":"/ambari-design/metrics/ambari-server-metrics","permalink":"/docs/2.7.8/ambari-design/metrics/ambari-server-metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/versioned_docs/version-2.7.8/ambari-design/metrics/ambari-server-metrics.md","tags":[],"version":"2.7.8","frontMatter":{},"sidebar":"ambariSidebar","previous":{"title":"Upgrading Ambari Metrics System","permalink":"/docs/2.7.8/ambari-design/metrics/upgrading-ambari-metrics-system"},"next":{"title":"Ambari Metrics - Whitelisting","permalink":"/docs/2.7.8/ambari-design/metrics/ambari-metrics-whitelisting"}}');var t=i(74848),n=i(28453);const a={},c="Ambari Server Metrics",o={},l=[{value:"Outline",id:"outline",level:2},{value:"Metrics System Terminology",id:"metrics-system-terminology",level:2},{value:"Configuration / Enabling",id:"configuration--enabling",level:2},{value:"Metric Sources",id:"metric-sources",level:2},{value:"JVM Metrics",id:"jvm-metrics",level:3},{value:"Database Metrics",id:"database-metrics",level:3},{value:"Disabling Ambari Server metrics globally",id:"disabling-ambari-server-metrics-globally",level:2},{value:"Related JIRA",id:"related-jira",level:2}];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"ambari-server-metrics",children:"Ambari Server Metrics"})}),"\n",(0,t.jsx)(r.h2,{id:"outline",children:"Outline"}),"\n",(0,t.jsx)(r.p,{children:"Ambari Server can be used to manage a few tens of nodes to 1000+ nodes. In large clusters, or clusters with sub-optimal infrastructure, capturing Ambari Server performance can be useful for tuning the server as well as guiding future performance optimization efforts. Through this feature, a Metrics Source-Sink framework has been implemented within the AmbariServer which facilitates fine grained control of the various metric sources as well as eases addition of future metrics sources."}),"\n",(0,t.jsx)(r.p,{children:"Specifically, Ambari server JVM and database (EclipseLink) metric sources have been wired up to send metrics to AMS, and visualized through Grafana dashboards."}),"\n",(0,t.jsx)(r.h2,{id:"metrics-system-terminology",children:"Metrics System Terminology"}),"\n",(0,t.jsx)(r.h2,{id:"configuration--enabling",children:"Configuration / Enabling"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"To enable Ambari Server metrics, make sure the following config file exists during Ambari Server start/restart -  /etc/ambari-server/conf/metrics.properties."}),"\n",(0,t.jsx)(r.li,{children:"Currently, only 2 metric sources have been implemented - JVM Metric Source and Database Metric Source."}),"\n",(0,t.jsxs)(r.li,{children:["To add / remove a metric source to be tracked the following config needs to be modified in the metrics.properties file.","\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"    metric.sources=jvm,database\n"})}),"\n"]}),"\n",(0,t.jsx)(r.li,{children:"Source specific configs are discussed in the metrics source section."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"metric-sources",children:"Metric Sources"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Functionality"}),(0,t.jsx)(r.th,{children:"Interface"}),(0,t.jsx)(r.th,{children:"Implementation(s)"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Metrics Service"}),(0,t.jsxs)(r.td,{children:["Serves as a starting point for the Metrics system.",(0,t.jsx)("br",{}),"Loads metrics configuration.",(0,t.jsx)("br",{}),"Initializes the sink. If the sink is not properly initialized (AMS is not yet deployed), it tries to re-initialize every 5 minutes asynchronously.",(0,t.jsx)("br",{}),"Initializes and starts configured sources."]}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.MetricsService"}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.impl.MetricsServiceImpl"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Metric Source"}),(0,t.jsxs)(r.td,{children:["Any sub-component of Ambari Server that has metrics of interest.",(0,t.jsx)("br",{}),"Needs subset of metrics configuration corresponding to the source and the Sink to be initialized.",(0,t.jsx)("br",{}),"Periodically publishes metrics to the Sink.",(0,t.jsx)("br",{}),"Example - JVM, database etc."]}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.MetricsSource"}),(0,t.jsxs)(r.td,{children:["org.apache.ambari.server.metrics.system.impl.JvmMetricsSource",(0,t.jsx)("br",{}),"org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Metric Sink"}),(0,t.jsx)(r.td,{children:"Flushes the metrics to an external metrics collection system (Metrics Collector)"}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.MetricsSink"}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.impl.AmbariMetricSinkImp"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"jvm-metrics",children:"JVM Metrics"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Working"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Collects and publishes Ambari Server JVM related metrics using Codahale library."}),"\n",(0,t.jsx)(r.li,{children:"Metrics collected for GC, Buffers, Threads, Memory and File descriptor."}),"\n",(0,t.jsx)(r.li,{children:'To enable this source, add "jvm" to the metric.sources config in metrics.properties and restart Ambari Server.'}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Configs"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Config Name"}),(0,t.jsx)(r.th,{children:"Default Value"}),(0,t.jsx)(r.th,{children:"Explanation"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.jvm.class"}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.impl.JvmMetricsSource"}),(0,t.jsx)(r.td,{children:"Class used to collect JVM Metrics."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.jvm.interval"}),(0,t.jsx)(r.td,{children:"10"}),(0,t.jsx)(r.td,{children:"Interval, in seconds, used to denote how often metrics should be collected."})]})]})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Grafana dashboard"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The 'Ambari Server - JVM' dashboard represents the metrics captured from the JvmMetricsSource."}),"\n",(0,t.jsx)(r.li,{children:"Contains memory, GC and threads related graphs that might be of interest on a non performing syste"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"database-metrics",children:"Database Metrics"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Working"})}),"\n",(0,t.jsx)(r.p,{children:"The EclipseLink PeformanceMonitor has been extended to support a custom Ambari Database Metrics source. It provides us with monitoring data per entity and per operation on the entity."}),"\n",(0,t.jsx)(r.p,{children:"The Performance Monitor provides 2 kinds of metrics -"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Counter - Number of occurrences of the operation / query. For such type of metrics, the metric name will start with Counter."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Timer - Total cumulative time spent on the operation / query. For such type of metrics, the metric name will start with Timer.\nFor example, some of the metrics being collected tothe Database Metrics Source."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Counter.ReadObjectQuery.HostRoleCommandEntity.readHostRoleCommandEntity"}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Timer.ReadAllQuery.StackEntity.StackEntity.findByNameAndVersion.ObjectBuilding"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"In addition to the Counter & Timer metrics collected from EclipseLink, a computed metric of Timer/Counter (divided by) is also sent. This metrics provides the average time taken for an operation across time."}),"\n",(0,t.jsx)(r.p,{children:"For example, if"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:" Counter Metric : Counter.ReadAllQuery.HostRoleCommandEntity = 10000\n Timer Metric : Timer.ReadAllQuery.HostRoleCommandEntity = 50\n Computed Metric (Avg time for the operation) : ReadAllQuery.HostRoleCommandEntity = 200 (10000 div by 50)\n"})}),"\n",(0,t.jsx)(r.p,{children:"As seen above, the computed metric name will be the same as the Timer & Counter metric except without the 'Timer.' / 'Counter.' prefix."}),"\n",(0,t.jsxs)(r.p,{children:['To enable this source, add "',(0,t.jsx)(r.strong,{children:"database"}),'" to the ',(0,t.jsx)(r.strong,{children:"metric.sources"})," config in metrics.properties and restart Ambari Server."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"configs"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Config Name"}),(0,t.jsx)(r.th,{children:"Default Value"}),(0,t.jsx)(r.th,{children:"Explanation"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.database.class"}),(0,t.jsx)(r.td,{children:"org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource"}),(0,t.jsx)(r.td,{children:"Class used to collect Database Metrics from extended Performance Monitor class - org.apache.ambari.server.metrics.system.impl.AmbariPerformanceMonitor."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.database.performance.monitor.query.weight"}),(0,t.jsx)(r.td,{children:"HEAVY"}),(0,t.jsx)(r.td,{children:"EclipseLink Performance monitor granularity : NONE / NORMAL / HEAVY / ALL"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.database.monitor.dumptime"}),(0,t.jsx)(r.td,{children:"60000"}),(0,t.jsx)(r.td,{children:"Collection interval in milliseconds"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.database.monitor.entities"}),(0,t.jsxs)(r.td,{children:["Cluster(.",(0,t.jsx)(r.em,{children:")Entity,Host(."}),")Entity,ExecutionCommandEntity, ServiceComponentDesiredStateEntity,Alert(.*)Entity,StackEntity,StageEntity"]}),(0,t.jsx)(r.td,{children:"Only these entities' metrics will be collected and tracked. (org.apache.ambari.server.orm.entities)."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"source.database.monitor.query.keywords.include"}),(0,t.jsx)(r.td,{children:"CacheMisses"}),(0,t.jsx)(r.td,{children:"Include some metrics which have the keyword even if they are not part of requested Entities."})]})]})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Grafana dashboards"})}),"\n",(0,t.jsx)(r.p,{children:"Ambari database metrics have been represented in 2 Grafana dashboards."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["'Ambari Server - Database' dashboard","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"An aggregate dashboard that displays Total ReadAllQuery, Cache Hits, Cache Misses, Query Stages, Query Types across all entities."}),"\n",(0,t.jsx)(r.li,{children:"It also contains an example of how to visualize Timer, Counter and Avg Timing data for a specific entity - HostRoleCommandEntity."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["'Ambari Server - Top N Entities' dashboard","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Shows Top N entities that have maximum number of ReadAllQuery operations done on them."}),"\n",(0,t.jsx)(r.li,{children:"Shows Top N entities that the database spent the most time in ReadAllQuery operations."}),"\n",(0,t.jsx)(r.li,{children:"Shows Top N entities that have maximum Cache Misses\nThese dashboard graphs are meant to provide an example of how to create graphs to query specific entities or operations in an Ad Hoc manner."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"disabling-ambari-server-metrics-globally",children:"Disabling Ambari Server metrics globally"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Add the following config to /etc/ambari-server/conf/ambari.properties","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"ambariserver.metrics.disable=true"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.li,{children:"Restart Ambari Server"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"related-jira",children:"Related JIRA"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://issues.apache.org/jira/browse/AMBARI-17589",children:"AMBARI-17589"})})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);