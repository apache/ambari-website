"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[5335],{28453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>a});var r=i(96540);const s={},n=r.createContext(s);function c(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(n.Provider,{value:t},e.children)}},51249:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ambari-design/metrics/metrics-api-specification","title":"Ambari Metrics API specification","description":"The Ambari REST API supports metric queries at CLUSTER, HOST, COMPONENT and HOST COMPONENT levels.","source":"@site/versioned_docs/version-2.7.5/ambari-design/metrics/metrics-api-specification.md","sourceDirName":"ambari-design/metrics","slug":"/ambari-design/metrics/metrics-api-specification","permalink":"/docs/2.7.5/ambari-design/metrics/metrics-api-specification","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/versioned_docs/version-2.7.5/ambari-design/metrics/metrics-api-specification.md","tags":[],"version":"2.7.5","frontMatter":{"title":"Ambari Metrics API specification"},"sidebar":"ambariSidebar","previous":{"title":"Troubleshooting","permalink":"/docs/2.7.5/ambari-design/metrics/troubleshooting"},"next":{"title":"Stack Defined Metrics","permalink":"/docs/2.7.5/ambari-design/metrics/stack-defined-metrics"}}');var s=i(74848),n=i(28453);const c={title:"Ambari Metrics API specification"},a=void 0,o={},d=[{value:"CLUSTER",id:"cluster",level:2},{value:"HOST",id:"host",level:2},{value:"COMPONENT",id:"component",level:2},{value:"HOST COMPONENT",id:"host-component",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The Ambari REST API supports metric queries at CLUSTER, HOST, COMPONENT and HOST COMPONENT levels."}),"\n",(0,s.jsxs)(t.p,{children:["Broadly, the types of metrics queries supported are: ",(0,s.jsx)(t.strong,{children:"time range"})," or ",(0,s.jsx)(t.strong,{children:"point in time"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Following is an illustration of an API call that fetches metrics from the Metrics backend service using Ambari API."}),"\n",(0,s.jsx)(t.h2,{id:"cluster",children:"CLUSTER"}),"\n",(0,s.jsx)(t.p,{children:"E.g.: Dashboard metrics : Fetch load average across all nodes of a cluster"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"http://<ambari-server>:8080/api/v1/clusters/<cluster-name>?fields=metrics/load[1430844925,1430848525,15]&_=1430848532904\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above API call retrieves the load average, aggregated across all hosts in the cluster."}),"\n",(0,s.jsx)(t.p,{children:"The request part of the API call selects the cluster instance while the predicate includes the metric with the time range query, followed by current time in milliseconds."}),"\n",(0,s.jsx)(t.p,{children:"Time range query:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Comment"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Start time"}),(0,s.jsx)(t.td,{children:"1430844925"}),(0,s.jsx)(t.td,{children:"Start time for the time range. (Epoch)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"End time"}),(0,s.jsx)(t.td,{children:"1430848525"}),(0,s.jsx)(t.td,{children:"End time of the time range. (Epoch)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Step"}),(0,s.jsx)(t.td,{children:"15"}),(0,s.jsx)(t.td,{children:"Default step, this is used only for zero padding or null padding if the padding interval cannot be determined from the retrieved data."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"host",children:"HOST"}),"\n",(0,s.jsx)(t.p,{children:"E.g.: Host metrics: Get the cpu utilization on a particular host in the cluster"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"http://<ambari-server>:8080/api/v1/clusters/<cluster-name>/hosts/<host-name>?fields=metrics/cpu/cpu_user[1430844610,1430848210,15],metrics/cpu/cpu_wio[1430844610,1430848210,15],metrics/cpu/cpu_nice[1430844610,1430848210,15],metrics/cpu/cpu_aidle[1430844610,1430848210,15],metrics/cpu/cpu_system[1430844610,1430848210,15],metrics/cpu/cpu_idle[1430844610,1430848210,15]&_=1430848217591\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above API call retrieves all cpu related metrics required to chart out cpu utilization on a host page."}),"\n",(0,s.jsx)(t.p,{children:"The request part of the above API call selects the host which is queried while the predicate part includes the metric names with time range query."}),"\n",(0,s.jsx)(t.h2,{id:"component",children:"COMPONENT"}),"\n",(0,s.jsx)(t.p,{children:"E.g.: Service metrics: Get the capacity utilization metrics aggregated across all datanodes but only the latest value (point in time)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:" http://<ambari-server>:8080/api/v1/clusters/<cluster-name>/services/HDFS/components/DATANODE?fields=metrics/dfs/datanode/DfsUsed,metrics/dfs/datanode/Capacity&_=1430849798630\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above API call retrieves two metrics values which represent the point in time metric value for the requested metrics obtained for the Metrics Service backend. (non JMX)"}),"\n",(0,s.jsx)(t.p,{children:"For a call to get JMX metrics directly from a Hadoop daemon, use the metrics name that corresponds to the JMX MBean metric, example: metrics/dfs/FSNamesystem/CapacityUsedGB (Refer to Stack Defined Metrics for more info)"}),"\n",(0,s.jsx)(t.p,{children:"The request part of the above API call selects the service from the cluster while predicate part includes the metrics names."}),"\n",(0,s.jsx)(t.h2,{id:"host-component",children:"HOST COMPONENT"}),"\n",(0,s.jsx)(t.p,{children:"E.g.: Daemon metrics: Get the heap memory usage for active Namenode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"http://<ambari-server>:8080/api/v1/clusters/<cluster-name>/hosts/<host-name>/host_components/NAMENODE?fields=metrics/jvm/memHeapCommittedM[1430847303,1430850903,15],metrics/jvm/memHeapUsedM[1430847303,1430850903,15]&_=1430850903846\nThe above API call retrieves JVM heap metrics for the Active Namenode in the cluster.\n"})}),"\n",(0,s.jsx)(t.p,{children:"The request part of the api selects the Namenode host component while predicate part includes metrics with time range query."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);