"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[482],{28453:(e,i,s)=>{s.d(i,{R:()=>t,x:()=>o});var n=s(96540);const r={},a=n.createContext(r);function t(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),n.createElement(a.Provider,{value:i},e.children)}},49058:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ambari-design/views/index","title":"Views","description":"Ambari Views offer a systematic way to plug-in UI capabilities to surface custom visualization, management and monitoring features in Ambari Web. A \\" view\\" is a way of extending Ambari that allows 3rd parties to plug in new resource types along with the APIs, providers and UI to support them. In other words, a view is an application that is deployed into the Ambari container.","source":"@site/versioned_docs/version-2.7.5/ambari-design/views/index.md","sourceDirName":"ambari-design/views","slug":"/ambari-design/views/","permalink":"/docs/2.7.5/ambari-design/views/","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/versioned_docs/version-2.7.5/ambari-design/views/index.md","tags":[],"version":"2.7.5","frontMatter":{},"sidebar":"ambariSidebar","previous":{"title":"Technology Stack","permalink":"/docs/2.7.5/ambari-design/technology-stack"},"next":{"title":"Framework Services","permalink":"/docs/2.7.5/ambari-design/views/framework-services"}}');var r=s(74848),a=s(28453);const t={},o="Views",c={},d=[{value:"Useful Resources",id:"useful-resources",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Components of a View",id:"components-of-a-view",level:2},{value:"Client-side Assets",id:"client-side-assets",level:3},{value:"Server-side Resources",id:"server-side-resources",level:3},{value:"View Package",id:"view-package",level:2},{value:"Versions and Instances",id:"versions-and-instances",level:2},{value:"Instance Configuration Parameters",id:"instance-configuration-parameters",level:3},{value:"View Lifecycle",id:"view-lifecycle",level:2},{value:"Instance Configuration Parameters",id:"instance-configuration-parameters-1",level:3}];function h(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"views",children:"Views"})}),"\n",(0,r.jsxs)(i.admonition,{title:"This capability is currently under development. :::info",type:"info",children:[(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Ambari Views"}),' offer a systematic way to plug-in UI capabilities to surface custom visualization, management and monitoring features in Ambari Web. A " ',(0,r.jsx)(i.strong,{children:"view"}),'" is a way of extending Ambari that allows 3rd parties to plug in new resource types along with the APIs, providers and UI to support them. In other words, a view is an application that is deployed into the Ambari container.']}),(0,r.jsx)(i.h2,{id:"useful-resources",children:"Useful Resources"}),(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Resource"}),(0,r.jsx)(i.th,{children:"Link"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Views Overview"}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.a,{href:"http://www.slideshare.net/hortonworks/ambari-views-overview",children:"http://www.slideshare.net/hortonworks/ambari-views-overview"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Views Framework API Docs"}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.a,{href:"https://github.com/apache/ambari/blob/trunk/ambari-views/docs/index.md",children:"https://github.com/apache/ambari/blob/trunk/ambari-views/docs/index.md"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Views Framework Examples"}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.a,{href:"https://github.com/apache/ambari/tree/trunk/ambari-views/examples",children:"https://github.com/apache/ambari/tree/trunk/ambari-views/examples"})})]})]})]}),(0,r.jsx)(i.h2,{id:"terminology",children:"Terminology"}),(0,r.jsx)(i.p,{children:"The following section describes the basic terminology associated with views."}),(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Term"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View Name"}),(0,r.jsx)(i.td,{children:"The name of the view. The view name identifies the view to Ambari."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View Version"}),(0,r.jsx)(i.td,{children:"The version of the view. A unique view name can have multiple versions deployed in Ambari."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View Package"}),(0,r.jsxs)(i.td,{children:["This is the JAR package that contains the ",(0,r.jsx)(i.strong,{children:"view definition"})," and all view resources (server-side resources and client-side assets) for a given view version. See ",(0,r.jsx)(i.a,{href:"#view-package",children:"View Package"})," for more information on the contents and structure of the package."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View Definition"}),(0,r.jsx)(i.td,{children:"This defines the view name, version, resources and required/optional configuration parameters for a view. The view definition file is included in the view package. See View Definition for more information on the view definition file syntax and features."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View Instance"}),(0,r.jsx)(i.td,{children:"An unique instance of a view, that is based on a view definition and specific version that is configured. See Versions and Instances for more information."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"View API"}),(0,r.jsx)(i.td,{children:"The REST API for viewing the list of deployed views and creating view instances. See View API for more information."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Framework Services"}),(0,r.jsx)(i.td,{children:"The server-side of the view framework exposes certain services for use with your views. This includes persistence of view instance data and view eventing. See Framework Services for more information."})]})]})]}),(0,r.jsx)(i.h2,{id:"components-of-a-view",children:"Components of a View"}),(0,r.jsxs)(i.p,{children:["A view can consist of ",(0,r.jsx)(i.strong,{children:"client-side assets"})," (i.e. the UI that is exposed in Ambari Web) and ",(0,r.jsx)(i.strong,{children:"server-side resources"})," (i.e. the classes that expose REST end points). When the view loads into Ambari Web, the view UI can use the view server-side resources as necessary to deliver the view functionality."]}),(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"Apache Ambari &gt; Views &gt; view-components.jpg",src:s(49362).A+"",title:"Apache Ambari &gt; Views &gt; view-components.jpg",width:"582",height:"196"})}),(0,r.jsx)(i.h3,{id:"client-side-assets",children:"Client-side Assets"}),(0,r.jsx)(i.p,{children:"The view does not limit or restrict what client-side technologies a view uses. You can package client-side dependencies (such as JavaScript and CSS frameworks) with your view."}),(0,r.jsx)(i.h3,{id:"server-side-resources",children:"Server-side Resources"}),(0,r.jsxs)(i.p,{children:["A view can expose resources as REST end points to be used in conjunction with the client-side to deliver the functionality of your view application. Thees resources are written in Java and can be anything from a servlet to a regular REST service to an Ambari ResourceProvider (i.e. a special type of REST service that handles some REST capabilities such as partial response and pagination \u2013 if you adhere to the Ambari ResourceProvider interface). See ",(0,r.jsx)(i.a,{href:"/docs/2.7.5/ambari-design/views/framework-services",children:"Framework Services"})," for more information on capabilities that the framework exposes on the server-side for views."]}),(0,r.jsxs)(i.admonition,{type:"info",children:[(0,r.jsxs)(i.mdxAdmonitionTitle,{children:["Checkout the ",(0,r.jsx)(i.strong,{children:"Weather View"})," as an example of a view that exposes servlet and REST endpoints."]}),(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"https://github.com/apache/ambari/tree/trunk/ambari-views/examples/weather-view",children:"https://github.com/apache/ambari/tree/trunk/ambari-views/examples/weather-view"})," :::"]}),(0,r.jsx)(i.h2,{id:"view-package",children:"View Package"}),(0,r.jsxs)(i.p,{children:["The assets associated with a view are delivered as a JAR package. The ",(0,r.jsx)(i.strong,{children:"view definition file"})," must be at the root of the package. UI assets and server-side classes are served from the root. Dependent Java libraries are placed in the ",(0,r.jsx)(i.code,{children:"WEB-INF/lib"})," directory."]}),(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"view.jar\n|\n|- view.xml\n|\n|-\n|\n|- index.html\n| |\n| |_\n|\n|_ WEB-INF\n  |\n  |_ lib/*.jar\n"})}),(0,r.jsx)(i.h2,{id:"versions-and-instances",children:"Versions and Instances"}),(0,r.jsxs)(i.p,{children:["Multiple versions of a given view can be deployed into Ambari and multiple instances of each view can be created for each version. For example, I can have a view named FILES and deploy versions 0.1.0 and 0.2.0. I can then create instances of each version ",(0,r.jsx)(i.code,{children:"FILES_0.1.0"})," and ",(0,r.jsx)(i.code,{children:"FILES_0.2.0"})," allowing some Ambari users to have an older version of FILES (0.1.0), and other users to have a newer version (0.2.0)."]}),(0,r.jsx)(i.h3,{id:"instance-configuration-parameters",children:"Instance Configuration Parameters"}),(0,r.jsx)(i.p,{children:'As part of a view definition, the instance configuration parameters are specified (i.e. "these parameters are needed to configure an instance of this view"). When you create a view instance, you specify the configuration parameters specific to that instance. Since parameters are scoped to a particular view instance, you can have multiple instances of a view, each instance configured differently.'}),(0,r.jsxs)(i.p,{children:["Using the example above, I can create two instances of the ",(0,r.jsx)(i.code,{children:"FILES_0.2.0"})," version, one instance that is configured a certain way and the second that is configured differently. This allows some Ambari users to use ",(0,r.jsx)(i.code,{children:"FILES"})," one way, and other users a different way."]}),(0,r.jsxs)(i.p,{children:["See ",(0,r.jsx)(i.a,{href:"/docs/2.7.5/ambari-design/views/framework-services",children:"Framework Services"})," for more information on instance configuration properties."]}),(0,r.jsx)(i.h2,{id:"view-lifecycle",children:"View Lifecycle"}),(0,r.jsxs)(i.p,{children:["The lifecycle of a view is shown below. As you deploy a view and create instances of a view, server-side framework events are invoked. See ",(0,r.jsx)(i.a,{href:"/docs/2.7.5/ambari-design/views/framework-services",children:"Framework Services"})," for more information on capabilities that the framework exposes on the server-side for views."]}),(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"Apache Ambari &gt; Views &gt; view-lifecycle.png",src:s(80852).A+"",width:"562",height:"230"})}),(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"_ ... _"})}),(0,r.jsx)(i.h3,{id:"instance-configuration-parameters-1",children:"Instance Configuration Parameters"}),(0,r.jsx)(i.p,{children:'As part of a view definition, the instance configuration parameters are specified (i.e. "these parameters are needed to configure an instance of this view"). When you create a view instance, you specify the configuration parameters specific to that instance. Since parameters are scoped to a particular view instance, you can have multiple instances of a view, each instance configured differently.'}),(0,r.jsxs)(i.p,{children:["Using the example above, I can create two instances of the ",(0,r.jsx)(i.code,{children:"FILES_0.2.0"})," version, one instance that is configured a certain way and the second that is configured differently. This allows some Ambari users to use ",(0,r.jsx)(i.code,{children:"FILES"})," one way, and other users a different way. ",(0,r.jsx)(i.code,{children:"_ ... _"})]})]})]})]})}function l(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},49362:(e,i,s)=>{s.d(i,{A:()=>n});const n=s.p+"assets/images/view-components-7a997189cc9948e0d766b21d9211c5d5.jpg"},80852:(e,i,s)=>{s.d(i,{A:()=>n});const n=s.p+"assets/images/view-lifecycle-74bbfd87024dfb48f97a04cdb47dbe03.png"}}]);