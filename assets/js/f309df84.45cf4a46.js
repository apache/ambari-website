"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[4093],{28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>a});var s=t(96540);const n={},r=s.createContext(n);function l(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(r.Provider,{value:i},e.children)}},65692:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ambari-design/metrics/ambari-metrics-whitelisting","title":"Ambari Metrics - Whitelisting","description":"In large clusters (500+ nodes), sometimes there are performance issues seen in AMS aggregations. In the ambari-metrics-collector log file, we can see log lines that look like","source":"@site/docs/ambari-design/metrics/ambari-metrics-whitelisting.md","sourceDirName":"ambari-design/metrics","slug":"/ambari-design/metrics/ambari-metrics-whitelisting","permalink":"/docs/next/ambari-design/metrics/ambari-metrics-whitelisting","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/docs/ambari-design/metrics/ambari-metrics-whitelisting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"ambariSidebar","previous":{"title":"Ambari Server Metrics","permalink":"/docs/next/ambari-design/metrics/ambari-server-metrics"},"next":{"title":"Quick Links","permalink":"/docs/next/ambari-design/quick-links"}}');var n=t(74848),r=t(28453);const l={},a="Ambari Metrics - Whitelisting",c={},o=[{value:"How do we enable whitelisting in AMS.",id:"how-do-we-enable-whitelisting-in-ams",level:2}];function m(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"ambari-metrics---whitelisting",children:"Ambari Metrics - Whitelisting"})}),"\n",(0,n.jsx)(i.p,{children:"In large clusters (500+ nodes), sometimes there are performance issues seen in AMS aggregations. In the ambari-metrics-collector log file, we can see log lines that look like"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"20:51:30,952 INFO 2080712366@qtp-974606690-381 AsyncProcess:1597 - #1, waiting for 13948 actions to finish\n20:51:31,601 INFO 1279097595@qtp-974606690-359 AsyncProcess:1597 - #1, waiting for 19376 actions to finish\n"})}),"\n",(0,n.jsx)(i.p,{children:"In Ambari 3.0.0, we are tackling these performance issues through a complete schema and aggregation logic revamp. Until then, we can use AMS whitelisting to reduce the number of metrics tracked by AMS, there by solving this scale problem."}),"\n",(0,n.jsx)(i.h2,{id:"how-do-we-enable-whitelisting-in-ams",children:"How do we enable whitelisting in AMS."}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Until Ambari 2.4.3"}),"\nA metric whitelist file can be used to track the set of metrics in AMS. All other metrics will be discarded."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"STEPS"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Metric whitelist file is present in /etc/ambari-metrics-collector/conf. If not present in older Ambari versions, it can be downloaded from ",(0,n.jsx)(i.a,{href:"https://github.com/apache/ambari/blob/trunk/ambari-metrics/ambari-metrics-timelineservice/conf/unix/metrics_whitelist",children:"https://github.com/apache/ambari/blob/trunk/ambari-metrics/ambari-metrics-timelineservice/conf/unix/metrics_whitelist"})," to the collector host."]}),"\n",(0,n.jsxs)(i.li,{children:["Adding config ams-site : timeline.metrics.whitelist.file = ",(0,n.jsx)(i.code,{children:"/path/to/whitelist_file"})]}),"\n",(0,n.jsx)(i.li,{children:"Restart AMS collector"}),"\n",(0,n.jsx)(i.li,{children:"Verify whitelisting config was used. In ambari-metrics-collector log file, verify the line 'Whitelisting # metrics'."}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"From Ambari 2.5.0 onwards"}),"\nFrom Ambari 2.5.0, more refinements for whitelisting were included."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"App Blacklisting"})," - Blacklist metrics from one or more services. Other service metrics will be entirely allowed or controlled through a whitelist file."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"ams-site : timeline.metrics.apps.blacklist = hbase,namenode\n"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"App Whitelisting"})," - Whitelist metrics from one or more services."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"ams-site:timeline.metrics.apps.whitelist = nimbus,datanode   \n"})}),"\n",(0,n.jsx)(i.p,{children:"NOTE : The App name can be found from the metadata URL :"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"http://<metrics_collector_host>:6188/ws/v1/timeline/metrics/metadata\n"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Metric Whitelisting"})," - Same as the whitelisting method in Ambari 2.4.3 (through a whitelist file).\nIn addition to supplying metric names in the whitelist file, patterns can also be supplied using the .",(0,n.jsx)(i.em,{children:"p"})," perfix. For example, a pattern can be specified as follows"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"._p_dfs.FSNamesystem.*"}),"\n",(0,n.jsx)(i.p,{children:"._p_jvm.JvmMetrics*"}),"\n",(0,n.jsxs)(i.p,{children:["An example of a metric whitelisting file that has both metrics and patterns - ",(0,n.jsx)(i.a,{href:"https://github.com/apache/ambari/blob/trunk/ambari-metrics/ambari-metrics-timelineservice/src/test/resources/test_data/metric_whitelist.dat",children:"https://github.com/apache/ambari/blob/trunk/ambari-metrics/ambari-metrics-timelineservice/src/test/resources/test_data/metric_whitelist.dat"}),"."]}),"\n",(0,n.jsx)(i.p,{children:"These whitelisting/blacklisting techniques can be used together."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["If you just have timeline.metrics.whitelist.file = ",(0,n.jsx)(i.code,{children:"/path/to/whitelist_file"}),", only metrics in that file will be allowed (irrespective of whatever apps might be sending them)."]}),"\n",(0,n.jsx)(i.li,{children:"If you just have timeline.metrics.apps.blacklist = datanode, all datanode metrics will be disallowed. Metrics from all other services will be allowed."}),"\n",(0,n.jsx)(i.li,{children:"If you just have timeline.metrics.apps.whitelist = namenode, it is not useful since there is no blacklisting at all."}),"\n",(0,n.jsx)(i.li,{children:"If you have metric whitelisting enabled (through a file), and have timeline.metrics.apps.blacklist = datanode, all datanode metrics will be disallowed. The whitelisted metrics from other services will be allowed."}),"\n",(0,n.jsx)(i.li,{children:"If you have timeline.metrics.apps.blacklist = datanode, timeline.metrics.apps.whitelist = namenode and metric whitelisting enabled (through a file), datanode metrics will be blacklisted, all namenode metrics will be allowed, and whitelisted metrics from other services will be allowed."}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);