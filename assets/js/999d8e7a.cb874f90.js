"use strict";(self.webpackChunkambari_website=self.webpackChunkambari_website||[]).push([[6275],{13211:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"quick-start/environment-setup/vagrant-environment-setup","title":"Vagrant Environment Setup for Apache Ambari","description":"This guide helps you set up a basic multi-node Vagrant environment for Apache Ambari development and testing. The environment consists of one Ambari Server node and two Agent nodes, providing a minimal platform for development and testing.","source":"@site/docs/quick-start/environment-setup/vagrant-environment-setup.md","sourceDirName":"quick-start/environment-setup","slug":"/quick-start/environment-setup/vagrant-environment-setup","permalink":"/docs/next/quick-start/environment-setup/vagrant-environment-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/vivostar/vivostar.github.io/tree/master/docs/quick-start/environment-setup/vagrant-environment-setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"ambariSidebar","previous":{"title":"Quick Start Guide","permalink":"/docs/next/quick-start/quick-start-guide"},"next":{"title":"Docker Environment Setup for Apache Ambari","permalink":"/docs/next/quick-start/environment-setup/docker-environment-setup"}}');var t=s(74848),r=s(28453);const o={},a="Vagrant Environment Setup for Apache Ambari",l={},c=[{value:"Overview",id:"overview",level:2},{value:"System Requirements",id:"system-requirements",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Environment Architecture",id:"environment-architecture",level:2},{value:"Setting Up Vagrant Environment",id:"setting-up-vagrant-environment",level:2},{value:"Manual Configuration Steps",id:"manual-configuration-steps",level:2},{value:"1. Root User Configuration",id:"1-root-user-configuration",level:3},{value:"2. SSH Configuration",id:"2-ssh-configuration",level:3},{value:"3. Security Configuration",id:"3-security-configuration",level:3},{value:"4. Hosts File Configuration",id:"4-hosts-file-configuration",level:3},{value:"5. Enable Development Repository",id:"5-enable-development-repository",level:3},{value:"6. Verify Configuration",id:"6-verify-configuration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Common Vagrant Commands",id:"common-vagrant-commands",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"vagrant-environment-setup-for-apache-ambari",children:"Vagrant Environment Setup for Apache Ambari"})}),"\n",(0,t.jsx)(e.p,{children:"This guide helps you set up a basic multi-node Vagrant environment for Apache Ambari development and testing. The environment consists of one Ambari Server node and two Agent nodes, providing a minimal platform for development and testing."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.p,{children:"This guide is part of the Quick Start section and covers:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Setting up a basic three-node Vagrant environment"}),"\n",(0,t.jsx)(e.li,{children:"Configuring network and shared storage"}),"\n",(0,t.jsx)(e.li,{children:"Setting up SSH access between nodes"}),"\n",(0,t.jsx)(e.li,{children:"Configuring security settings (firewall, SELinux)"}),"\n",(0,t.jsx)(e.li,{children:"Preparing the environment for Ambari installation"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["For complete installation instructions, refer to the ",(0,t.jsx)(e.a,{href:"/docs/next/quick-start/installation-guide",children:"Installation Guide"}),"."]}),"\n",(0,t.jsx)(e.h2,{id:"system-requirements",children:"System Requirements"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Minimum Host Machine Resources"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"CPU: 6+ cores (2 cores per VM)"}),"\n",(0,t.jsx)(e.li,{children:"RAM: 24GB+ (8GB per VM)"}),"\n",(0,t.jsx)(e.li,{children:"Storage: 100GB+ free space"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Software Requirements"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"VirtualBox 6.1+"}),"\n",(0,t.jsx)(e.li,{children:"Vagrant 2.2+"}),"\n",(0,t.jsx)(e.li,{children:"Operating System: Linux, macOS, or Windows with virtualization support"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"This configuration provides minimum requirements for basic development and testing"}),"\n",(0,t.jsx)(e.li,{children:"Each VM requires 8GB RAM minimum for basic Hadoop services"}),"\n",(0,t.jsx)(e.li,{children:"The shared folder for RPM repository must exist on the host machine"}),"\n",(0,t.jsx)(e.li,{children:"Port 8080 should be available on the host machine for Ambari Web UI"}),"\n",(0,t.jsx)(e.li,{children:"For production environments, refer to the official sizing guide"}),"\n",(0,t.jsx)(e.li,{children:"Additional resources may be required depending on your specific use case"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Install ",(0,t.jsx)(e.a,{href:"https://www.virtualbox.org/wiki/Downloads",children:"VirtualBox"})]}),"\n",(0,t.jsxs)(e.li,{children:["Install ",(0,t.jsx)(e.a,{href:"https://www.vagrantup.com/downloads",children:"Vagrant"})]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"environment-architecture",children:"Environment Architecture"}),"\n",(0,t.jsx)(e.p,{children:"The Vagrant environment creates a minimal distributed setup with the following components:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Ambari Server Node (vm1)"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Primary controller node"}),"\n",(0,t.jsx)(e.li,{children:"Hosts Ambari Server and Web UI"}),"\n",(0,t.jsx)(e.li,{children:"Manages cluster configuration and operations"}),"\n",(0,t.jsx)(e.li,{children:"IP: 192.168.56.20"}),"\n",(0,t.jsxs)(e.li,{children:["Web UI accessible at ",(0,t.jsx)(e.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Agent Nodes (vm2, vm3)"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Execute and monitor Hadoop services"}),"\n",(0,t.jsx)(e.li,{children:"Report status to Ambari Server"}),"\n",(0,t.jsx)(e.li,{children:"Support service distribution and scaling"}),"\n",(0,t.jsx)(e.li,{children:"IPs: 192.168.56.21-22"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Network Layout"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Private network for inter-node communication"}),"\n",(0,t.jsx)(e.li,{children:"Port 8080 forwarded for Ambari Web UI access"}),"\n",(0,t.jsx)(e.li,{children:"Automated hosts file configuration"}),"\n",(0,t.jsx)(e.li,{children:"Disabled firewall for development ease"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Shared Storage"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"RPM repository accessible to all nodes"}),"\n",(0,t.jsx)(e.li,{children:"Consistent package access across cluster"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"setting-up-vagrant-environment",children:"Setting Up Vagrant Environment"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Create a new directory for your Vagrant environment:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"mkdir ambari-vagrant\ncd ambari-vagrant\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Create the RPM repository directory:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"mkdir -p ./ambari-repo\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsxs)(e.li,{children:["Create a ",(0,t.jsx)(e.code,{children:"Vagrantfile"}),":"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ruby",children:'# Vagrantfile for Apache Ambari 3-node development environment\n# This configuration creates a minimal cluster with one server and two agent nodes\n# All manual configuration steps will be performed after VM creation\n\nVagrant.configure("2") do |config|\n  # VM 1 - Primary Ambari Server Node\n  # This VM will host the Ambari Server and Web UI\n  config.vm.define "vm1" do |vm1|\n    # Use Rocky Linux 8 as the base operating system\n    vm1.vm.box = "generic/rocky8"\n    \n    # Set the hostname to vm1 for proper identification\n    vm1.vm.hostname = "vm1"\n\n    # Port forwarding for Ambari Web UI\n    # This allows accessing the Ambari interface at http://localhost:8080 from your host machine\n    vm1.vm.network "forwarded_port", guest: 8080, host: 8080\n\n    # Private network configuration\n    # Creates a private network for inter-VM communication with a static IP\n    vm1.vm.network "private_network", ip: "192.168.56.20"\n\n    # VirtualBox provider-specific configuration\n    vm1.vm.provider "virtualbox" do |vb|\n      # Disable GUI mode (headless operation)\n      vb.gui = false\n      \n      # Allocate 8GB RAM to this VM (minimum required for Ambari Server)\n      vb.memory = "8192"\n      \n      # Allocate 2 CPU cores to this VM\n      vb.cpus = 2\n    end\n  end\n\n  # VM 2 - First Agent Node\n  # This VM will run Ambari Agent and host Hadoop services\n  config.vm.define "vm2" do |vm2|\n    # Use Rocky Linux 8 as the base operating system\n    vm2.vm.box = "generic/rocky8"\n    \n    # Set the hostname to vm2 for proper identification\n    vm2.vm.hostname = "vm2"\n\n    # Private network configuration\n    # Creates a private network for inter-VM communication with a static IP\n    vm2.vm.network "private_network", ip: "192.168.56.21"\n\n    # VirtualBox provider-specific configuration\n    vm2.vm.provider "virtualbox" do |vb|\n      # Disable GUI mode (headless operation)\n      vb.gui = false\n      \n      # Allocate 8GB RAM to this VM (minimum required for Hadoop services)\n      vb.memory = "8192"\n      \n      # Allocate 2 CPU cores to this VM\n      vb.cpus = 2\n    end\n  end\n\n  # VM 3 - Second Agent Node\n  # This VM will run Ambari Agent and host additional Hadoop services\n  config.vm.define "vm3" do |vm3|\n    # Use Rocky Linux 8 as the base operating system\n    vm3.vm.box = "generic/rocky8"\n    \n    # Set the hostname to vm3 for proper identification\n    vm3.vm.hostname = "vm3"\n\n    # Private network configuration\n    # Creates a private network for inter-VM communication with a static IP\n    vm3.vm.network "private_network", ip: "192.168.56.22"\n\n    # VirtualBox provider-specific configuration\n    vm3.vm.provider "virtualbox" do |vb|\n      # Disable GUI mode (headless operation)\n      vb.gui = false\n      \n      # Allocate 8GB RAM to this VM (minimum required for Hadoop services)\n      vb.memory = "8192"\n      \n      # Allocate 2 CPU cores to this VM\n      vb.cpus = 2\n    end\n  end\n\n  # Shared folder for Ambari RPM repository\n  # This maps ./ambari-repo on the host to /vagrant_data on all VMs\n  # Used for distributing RPM packages to all nodes\n  config.vm.synced_folder "./ambari-repo", "/vagrant_data"\n\n  # Disable VirtualBox Guest Additions auto-update\n  # This prevents potential issues during VM startup\n  config.vbguest.auto_update = false\n  config.vbguest.no_remote = true\nend\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsx)(e.li,{children:"Install sshpass (required for SSH key distribution):"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# For macOS:\nbrew install sshpass\n\n# For Linux:\nsudo apt-get install sshpass  # Ubuntu/Debian\nsudo yum install sshpass      # RHEL/CentOS\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"5",children:["\n",(0,t.jsx)(e.li,{children:"Start the Vagrant environment:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"vagrant up\n"})}),"\n",(0,t.jsx)(e.h2,{id:"manual-configuration-steps",children:"Manual Configuration Steps"}),"\n",(0,t.jsx)(e.p,{children:"After starting your VMs, you must perform several important configuration steps to ensure proper cluster operation. These manual steps make it easier to understand the configuration process and troubleshoot issues."}),"\n",(0,t.jsx)(e.h3,{id:"1-root-user-configuration",children:"1. Root User Configuration"}),"\n",(0,t.jsxs)(e.p,{children:["By default, ",(0,t.jsx)(e.code,{children:"vagrant ssh vm1"})," logs you in as the ",(0,t.jsx)(e.code,{children:"vagrant"})," user. For Ambari installation and configuration, we'll use the root user for all operations:"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Switch to the root user on each VM:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to each VM\nvagrant ssh vm1  # Repeat for vm2, vm3\n\n# Switch to root user\nsudo su -\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Set a password for the root user:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# While logged in as root\npasswd\n\n# Enter and confirm a new password when prompted\n# Remember this password for future root access\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Note"}),": Root access is required for Ambari installation. The Ambari setup process needs to install packages and modify system configurations that require root privileges. All subsequent steps should be performed as the root user."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"2-ssh-configuration",children:"2. SSH Configuration"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"On each VM, modify SSH configuration to allow password authentication and root login:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to each VM and switch to root\nvagrant ssh vm1  # Repeat for vm2, vm3\nsudo su -\n\n# Edit sshd_config\nvi /etc/ssh/sshd_config\n\n# Make these changes:\n# PasswordAuthentication yes\n# PermitRootLogin yes\n\n# Restart sshd service\nsystemctl restart sshd\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Generate SSH keys on vm1 as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Connect to vm1 and switch to root\nvagrant ssh vm1\nsudo su -\n\n# Generate SSH key if not exists\nif [ ! -f ~/.ssh/id_rsa ]; then\n  ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa\nfi\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:"Set up passwordless SSH from vm1 to all VMs as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# On vm1 as root\n# Copy keys to each VM (including vm1 itself)\nssh-copy-id -o StrictHostKeyChecking=no root@vm1\nssh-copy-id -o StrictHostKeyChecking=no root@vm2\nssh-copy-id -o StrictHostKeyChecking=no root@vm3\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsx)(e.li,{children:"Test SSH connectivity as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Test SSH access between nodes as root\nssh root@vm2 echo "Connection to vm2 successful"\nssh root@vm3 echo "Connection to vm3 successful"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-security-configuration",children:"3. Security Configuration"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Disable SELinux on each VM as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to each VM and switch to root if not already\nvagrant ssh vm1  # Repeat for vm2, vm3\nsudo su -\n\n# Disable SELinux immediately\nsetenforce 0\n\n# Disable SELinux permanently\nsed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Ensure firewall is disabled on each VM as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to each VM and switch to root if not already\nvagrant ssh vm1  # Repeat for vm2, vm3\nsudo su -\n\n# Stop firewall\nsystemctl stop firewalld\n\n# Disable firewall on boot\nsystemctl disable firewalld\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-hosts-file-configuration",children:"4. Hosts File Configuration"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Configure /etc/hosts on each VM as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to each VM and switch to root if not already\nvagrant ssh vm1  # Repeat for vm2, vm3\nsudo su -\n\n# Edit hosts file\nvi /etc/hosts\n\n# Remove or comment out any lines with:\n# 127.0.0.1 vm1\n# 127.0.0.1 vm2\n# 127.0.0.1 vm3\n\n# Add these entries if not present:\n192.168.56.20 vm1\n192.168.56.21 vm2\n192.168.56.22 vm3\n"})}),"\n",(0,t.jsx)(e.h3,{id:"5-enable-development-repository",children:"5. Enable Development Repository"}),"\n",(0,t.jsx)(e.p,{children:"The Rocky Linux development repository needs to be enabled on each VM to install dependencies required for Ambari:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Connect to each VM and switch to root if not already\nvagrant ssh vm1  # Repeat for vm2, vm3\nsudo su -\n\n# Edit the Rocky-Devel repository configuration\nvi /etc/yum.repos.d/Rocky-Devel.repo\n\n# There are two possible scenarios:\n# 1. If all lines are commented (start with #), uncomment all lines\n# 2. If you see "enabled=0", change it to "enabled=1"\n\n# After editing, verify the repository is enabled\nyum repolist | grep devel\n'})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Note"}),": Enabling the development repository is critical for installing dependencies required by Ambari. Without this repository, you may encounter package installation failures during Ambari setup."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"6-verify-configuration",children:"6. Verify Configuration"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Check SSH connectivity as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Connect to vm1 and switch to root if not already\nvagrant ssh vm1\nsudo su -\n\n# Test SSH connections as root\nssh root@vm2 echo "Connection to vm2 successful"\nssh root@vm3 echo "Connection to vm3 successful"\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Verify security settings as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to vm1 and switch to root if not already\nvagrant ssh vm1\nsudo su -\n\n# Check SELinux status on each VM\nfor i in {1..3}; do\n  echo \"=== VM$i SELinux Status ===\"\n  ssh root@vm$i getenforce  # Should show 'Disabled'\ndone\n\n# Check firewall status on each VM\nfor i in {1..3}; do\n  echo \"=== VM$i Firewall Status ===\"\n  ssh root@vm$i systemctl status firewalld  # Should show 'inactive'\ndone\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:"Verify hosts file configuration as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Connect to vm1 and switch to root if not already\nvagrant ssh vm1\nsudo su -\n\n# Check hosts file on each VM\nfor i in {1..3}; do\n  echo "=== VM$i Hosts File ==="\n  ssh root@vm$i cat /etc/hosts\ndone\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsx)(e.li,{children:"Test network connectivity as root:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Connect to vm1 and switch to root if not already\nvagrant ssh vm1\nsudo su -\n\n# Test ping between all nodes\nfor i in {1..3}; do\n  echo "=== Testing from VM$i ==="\n  for j in {1..3}; do\n    [ $i -ne $j ] && ssh root@vm$i ping -c 1 vm$j\n  done\ndone\n'})}),"\n",(0,t.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(e.p,{children:"If you encounter issues during the manual configuration:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"SSH Issues:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# If SSH connection fails, check sshd configuration\nvagrant ssh vm1\nsudo su -\ncat /etc/ssh/sshd_config | grep PasswordAuthentication\ncat /etc/ssh/sshd_config | grep PermitRootLogin\n\n# Restart sshd on problem node\nsystemctl restart sshd\n\n# Manually copy SSH keys if needed\nssh-copy-id -o StrictHostKeyChecking=no root@vm2\nssh-copy-id -o StrictHostKeyChecking=no root@vm3\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"SELinux/Firewall Issues:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to vm1 and switch to root\nvagrant ssh vm1\nsudo su -\n\n# Check SELinux status\nssh root@vm1 getenforce\n\n# Manually disable SELinux\nssh root@vm1 setenforce 0\nssh root@vm1 sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config\n\n# Check firewall status\nssh root@vm1 systemctl status firewalld\n\n# Manually disable firewall\nssh root@vm1 systemctl stop firewalld\nssh root@vm1 systemctl disable firewalld\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:"Hosts File Issues:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Connect to vm1 and switch to root\nvagrant ssh vm1\nsudo su -\n\n# Check hosts file content\nssh root@vm1 cat /etc/hosts\n\n# Manually fix hosts file\nssh root@vm1 sed -i '/127.0.0.1.*vm[123]/d' /etc/hosts\nssh root@vm1 \"echo '192.168.56.20 vm1' >> /etc/hosts\"\nssh root@vm1 \"echo '192.168.56.21 vm2' >> /etc/hosts\"\nssh root@vm1 \"echo '192.168.56.22 vm3' >> /etc/hosts\"\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Resource Issues:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"If VMs are slow or unresponsive, check host resource usage"}),"\n",(0,t.jsx)(e.li,{children:"Ensure each VM has at least 8GB RAM allocated"}),"\n",(0,t.jsx)(e.li,{children:"Verify at least 2 CPU cores per VM"}),"\n",(0,t.jsx)(e.li,{children:"Check available disk space on host"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Network Connectivity:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Test inter-VM communication with ping"}),"\n",(0,t.jsx)(e.li,{children:"Verify VirtualBox network settings"}),"\n",(0,t.jsx)(e.li,{children:"Check for IP conflicts"}),"\n",(0,t.jsx)(e.li,{children:"Ensure port 8080 is available on host"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(e.p,{children:"After setting up your Vagrant environment:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Verify all VMs are running:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"vagrant status\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Test SSH access to each VM:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"vagrant ssh vm1  # Similarly for vm2, vm3\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsxs)(e.li,{children:["Proceed to the ",(0,t.jsx)(e.a,{href:"/docs/next/quick-start/installation-guide",children:"Installation Guide"})," to install and configure Ambari Server and Agents."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"common-vagrant-commands",children:"Common Vagrant Commands"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant up"}),": Start the VMs"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant halt"}),": Stop the VMs"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant destroy"}),": Remove the VMs"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant status"}),": Check VMs status"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant reload"}),": Restart VMs with new Vagrantfile configuration"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"vagrant ssh vm1"}),": Connect to VM1 (similarly for vm2, vm3)"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>a});var i=s(96540);const t={},r=i.createContext(t);function o(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);